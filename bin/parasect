#!/usr/bin/env python

import argparse
import os

from paras.scripts.general import run_parasect, write_results
from paras.scripts.feature_extraction.sequence_feature_extraction.sequence_labels import SEPARATOR_1, \
    SEPARATOR_2, SEPARATOR_3


def parse_arguments():
    parser = argparse.ArgumentParser()

    parser.add_argument('-i', type=str, required=True, help="Path to input fasta or gbk file.")
    parser.add_argument('-f', type=str, default='fasta', help="Input file type. Must be 'fasta' or 'gbk'.")
    parser.add_argument('-o', type=str, required=True, help="Path to output directory.")
    parser.add_argument('-n', type=int, default=3, help="Number of top predictions to report.")
    parser.add_argument('-j', type=str, default="run", help="Job name")
    parser.add_argument('-p', action='store_true',
                        help="Use profile alignment instead of HMM for active site extraction")
    parser.add_argument('-v', action='store_true', help="Verbose: print progress if given.")
    parser.add_argument('-one_hot', action='store_true', help="Use one-hot encoding to make predictions")
    parser.add_argument('-exclude_standard_substrates', action='store_true',
                        help="Don't run predictions for the default substrates included in PARASECT")
    parser.add_argument('-substrate_names', type=str, nargs='*',
                        help="Substrate names to be considered for substrate prediction. Use full names, such as 'proline'.")
    parser.add_argument('-smiles', type=str, nargs='*',
                        help="SMILES strings of substrates to be considered for substrate prediction.")
    parser.add_argument('-save_extended', action='store_true',
                        help="Save extended 34 amino acid signatures to file.")
    parser.add_argument('-save_signatures', action='store_true',
                        help="Save short 10 amino acid signatures to file ('Stachelhaus code')")
    parser.add_argument('-save_domains', action='store_true',
                        help="Save full a domain sequences to file ('Stachelhaus code')")

    parser.add_argument('-s1', type=str, default=SEPARATOR_1, help="Symbol used as separator")
    parser.add_argument('-s2', type=str, default=SEPARATOR_2, help="Symbol used as separator")
    parser.add_argument('-s3', type=str, default=SEPARATOR_3, help="Symbol used as separator")

    args = parser.parse_args()

    return args


def run():
    args = parse_arguments()
    if args.p:
        extraction_method = 'profile'
    else:
        extraction_method = 'hmm'

    results = run_parasect(args.i, args.o, args.j, args.exclude_standard_substrates,
                           args.smiles, args.substrate_names, extraction_method, args.save_signatures,
                           args.save_extended, args.save_domains, args.n, args.s1,
                           args.s2, args.s3, args.v, args.f, args.one_hot)

    out_file = os.path.join(args.o, f'{args.j}_parasect_results.txt')
    write_results(results, out_file)


if __name__ == "__main__":
    run()
